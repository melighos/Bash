If we set:
a=apple      # a simple variable
arr=(apple)  # an indexed array with a single element

and then echo the expression in the second column, we would get the result / behavior shown in the third column. 
The fourth column explains the behavior.

 # | Expression  | Result      | Comments
---+-------------+-------------+--------------------------------------------------------------------
 1 | "$a"        | apple       | variables are expanded inside ""
 2 | '$a'        | $a          | variables are not expanded inside ''
 3 | "'$a'"      | 'apple'     | '' has no special meaning inside ""
 4 | '"$a"'      | "$a"        | "" is treated literally inside ''
 5 | '\''        | **invalid** | can not escape a ' within ''; use "'" or $'\'' (ANSI-C quoting)
 6 | "red$arocks"| red         | $arocks does not expand $a; use ${a}rocks to preserve $a
 7 | "redapple$" | redapple$   | $ followed by no variable name evaluates to $
 8 | '\"'        | \"          | \ has no special meaning inside ''
 9 | "\'"        | \'          | \' is interpreted inside "" but has no significance for '
10 | "\""        | "           | \" is interpreted inside ""
11 | "*"         | *           | glob does not work inside "" or ''
12 | "\t\n"      | \t\n        | \t and \n have no special meaning inside "" or ''; use ANSI-C quoting
13 | "`echo hi`" | hi          | `` and $() are evaluated inside ""
14 | '`echo hi`' | `echo hi`   | `` and $() are not evaluated inside ''
15 | '${arr[0]}' | ${arr[0]}   | array access not possible inside ''
16 | "${arr[0]}" | apple       | array access works inside ""
17 | $'$a\''     | $a'         | single quotes can be escaped inside ANSI-C quoting
18 | "$'\t'"     | $'\t'       | ANSI-C quoting is not interpreted inside ""
19 | '!cmd'      | !cmd        | history expansion character '!' is ignored inside ''
20 | "!cmd"      | cmd args    | expands to the most recent command matching "cmd"
21 | $'!cmd'     | !cmd        | history expansion character '!' is ignored inside ANSI-C quotes
---+-------------+-------------+--------------------------------------------------------------------
# Bash File Testing
-b filename - Block special file
-c filename - Special character file
-d directoryname - Check for directory Existence
-e filename - Check for file existence, regardless of type (node, directory, socket, etc.)
-f filename - Check for regular file existence not a directory
-G filename - Check if file exists and is owned by effective group ID
-G filename set-group-id - True if file exists and is set-group-id
-k filename - Sticky bit
-L filename - Symbolic link
-O filename - True if file exists and is owned by the effective user id
-r filename - Check if file is a readable
-S filename - Check if file is socket
-s filename - Check if file is nonzero size
-u filename - Check if file set-user-id bit is set
-w filename - Check if file is writable
-x filename - Check if file is executable

STDIN --> 0
STDOUT --> 1
STDERR --> 2

command > file          # redirect output to a file
command >> file         # append output to a file
command < file          # take input from a file
2>                      # redirect the STDERR
2>&1                    # combine STDERR and STDOUT into the STDOUT
command >file 2>&1      # proper way to combine and redirect STDERR and STDOUT to a file
command 2&>1 >file      # actually will run 'command 2' with a redirection of &>1 (STDOUT and STDERR to file 1) 

command1 && command2    # AND. command2 is executed only if, command1 returns an exit status of zero (success)
command1 || command2    # OR. command2 is executed only if, command1 returns a non-zero exit status (failure)
;                       # command separator,  execute all commands regardless of whether the previous ones failed or not
:                       # Do nothing beyond expanding arguments and performing redirections. The return status is zero
!                       # operator to negated test expression

$$                      # process ID of the shell. In a () subshell, it expands to the process ID of the invoking shell, not the subshell.
$!                      # process ID of the job most recently placed into the background
$?                      # exit status of the most recently executed foreground pipeline.

$-                      # current option flags as specified upon invocation, by the set builtin command, or those set by the shell itself (such as the -i option).
$#                      # number of args that our script was run with, number of positional parameters in decimal.
$1..$n                  # actual script arguments
$0                      # name of the shell or shell script, filename of our script.

$*                      # positional parameters, when the expansion is not within double quotes, each positional parameter expands to a separate word. 
                        # In contexts where it is performed, those words are subject to further word splitting and pathname expansion.
                        # When the expansion occurs within double quotes, it expands to a single word with the value of each parameter separated 
                        # That is, "$*" is equivalent to "$1c$2c…", where c is the first character of the value of the IFS variable.

$@                      # positional parameters, when the expansion occurs within double quotes, each parameter expands to a separate word.                   
                        # "$@" is equivalent to "$1" "$2" …. If the double-quoted expansion occurs within a word, 
                        # the expansion of the first parameter is joined with the beginning part of the original word, 
                        # and the expansion of the last parameter is joined with the last part of the original word.

$_                      # absolute pathname used to invoke the shell or shell script, 
                        # also set to the full pathname used to invoke each command executed and placed in the environment exported to that command
--------------------------------------------------------------------------------------------------
printf                                                          # prints a formatted string to the standard output

read -p "Enter a file extension: " extension                    # request user input

trap 'rm $WORKDIR/work1$$ $WORKDIR/dataout$$; exit' 1 2         # work1$$ and dataout$$ will be automatically removed if signal number 1 and 2 is received
---------------------------------------------------------------------------------------------------
exit 0                                                          # serve the predetermined exit code
exit $?                                                         # serve exit code of the last run command
-----------------------------------------------------------------------------------------------------
ourfilename=$0                                                  # whats our filename?
echo $ourfilename

num_arguments=$#                                                # print arguments used upon script invocation
echo "the first three arguments were ${1}, ${2}, and ${3}"
----------------------------------------------------------------------------------------------------
myvar="your_value" 												# variable assignment
some_number=$(ls $HOME | wc -l)                                 # variable assignment

echo "this is my ${some_number}th number"                       # using variable

sed -ie "s/bird/${myvar}/g" statement.txt						# using variable in sed

echo "$(/bin/date) - Checking in."                              # using command variable

echo "there are $(cat /etc/passwd | wc -l) lines in the /etc/passwd" # using command variable
------------------------------------------------------------------------------------------------------
source file1.sh                                   # import variables from other script or file

#Determine when being sourced and end 'sourcing' at appropriate time
#Separate script into two sections, exit from script when sourced before getting to lower second
export var1="/data/share"
export var2='password'    
# --- End Definitions Section ---    
# check if we are being sourced by another script or shell
[[ "${#BASH_SOURCE[@]}" -gt "1" ]] && { return 0; }
# --- Begin Code Execution Section ---
echo "Hello"
echo $var1
echo $var2

#create a function in the file that I want to source, and in that function determine what should be available to the caller
export var1="/data/share"
export var2='password'
exportCfg() {
  tmpF=$(mktemp)
  declare -p var1 var2 > "$tmpF"
  echo "$tmpF"
}
if [ "$1" == "export" ]; then
  exportCfg;
  exit 0;
fi

echo "Hello"
echo $var1
echo $var2
------------------------------------------------------------------------------------------------------
while <something is true>; do									    # standard bash syntax for a 'while' loop
    <run some commands>
done

while true; do                                    # infinit loop
    <run some commands>
done

while inotifywait -e close_write filename ; do    # run command every time a file is modified

  echo "changed" >> /var/log/changed

done

for VARIABLE in 1 2 3 4 5 .. N                    # standard 'for' loop syntax
do
  command1
  command2
  commandN
done

for VARIABLE in file1 file2 file3
do
  command1 on $VARIABLE
  command2
  commandN
done

for OUTPUT in $(Linux-Or-Unix-Command-Here)
do
  command1 on $OUTPUT
  command2 on $OUTPUT
  commandN
done

for i in $(command); do                         # 'for' loop example
      echo "${i}"
  if [[ condition ]]; then
      return 3
  fi
done

## define an array ##
arrayname=( Dell HP Oracle )
 
## get item count using ${arrayname[@]} ##
for m in "${arrayname[@]}"                          # iterate through one-dimensional array variables
do
  echo "${m}"
  # do something on $m #
done

# three-expression bash for loops syntax
START=1
END=5
echo "Countdown"
 
for (( c=$START; c<=$END; c++ ))
do
  echo -n "$c "
  sleep 1
done
 
echo
echo "Boom!"
----------------------------------------------------------------------------------------------
function YourFunction(){                                                  # Defines a function
        if [[ $(command) ]] &>/dev/null; then                             # run command and supress output redirecting it to /dev/null

                return 0
        else
                return 1
        fi
}
YourFunction                                                               # run function


:(){ :|:& };:              # fork bomb, this bomb is a recursive function

:()                        # Defines a function, ":". It takes no arguments.
{ ... };                   # The body of the function.
:                          # Invoke the function ":" that was just defined.

kablammo() {               # Declaration
  kablammo | kablammo&     # The problematic body.
}; kablammo                # End function definition; invoke function.
-----------------------------------------------------------------------------------------------------
if command ; then                                               # conditionally do something if a command succeeded or failed
    echo "Command succeeded"
else
    echo "Command failed"
fi

if [[ condition ]]; then                                        # new test syntax. [...] for old, more portable test syntax
	#statements
fi

if [[ condition1 ]] && [[ condition2 ]]; then
    #commands
elif [[ condition3 ]]; then
    #commands
fi

if lsof "$filename" > /dev/null; then                           # you need a command between then and else, add an :, which is a null command
  # file is open
  :
else
  printf 'deleting %s\n' "$filename"
  rm -- "$filename"
fi
------------------------------------------------------------------------------------------------------------------------
my_var="var"                                                    # find out if a variable has NULL value OR not
if [ -z "$my_var" ]
then
      echo "\$my_var is NULL"
else
      echo "\$my_var is NOT NULL"
fi

my_var=""                                                       
if test -z "$my_var" 
then
      echo "\$my_var is NULL"
else
      echo "\$my_var is NOT NULL"
fi

var="$1"                                                        # find out if a variable has NULL value OR not
if [ ! -n "$var" ]
then
	echo "$0 - Error \$var not set or NULL"
else
	echo "\$var set and now starting $0 shell script..."
fi

my_str="test"                                                   # find out if a variable has NULL value OR not
if [[ ${my_str} ]]; then
  echo " Has a value"
else
  echo "No value"
fi
--------------------------------------------------------------------------------------------------------
if [ ! -f "/etc/conf/foo.txt" ]; then                            # Check if a file exists
 echo "complex set of rules" > /etc/conf/foo.txt
fi
                                                    
if [ -e "$file" ]; then                                          # Check if a file exists
    echo "File exists"
else 
    echo "File does not exist"
fi 

if [ -d "$DIRECTORY" ]; then                                    # Check if a directory exists
  # Control will enter here if $DIRECTORY exists.
fi

if [ ! -d "$DIRECTORY" ]; then                                  # Check if a directory doesn't exist:
  # Control will enter here if $DIRECTORY doesn't exist.
fi

if [ -d "$LINK_OR_DIR" ]; then                                  # Symbolic links may have to be treated differently, if subsequent commands expect directories
  if [ -L "$LINK_OR_DIR" ]; then
    # It is a symlink!
    # Symbolic link specific commands go here.
    rm "$LINK_OR_DIR"
  else
    # It's a directory!
    # Directory command goes here.
    rmdir "$LINK_OR_DIR"
  fi
fi

if ! mountpoint -q "$DATA_DIR"; then                            # see if the volume is already mounted, if mountpoint doesn’t exist, it’ll be mounted
  mount -o discard,defaults,noatime "$VOLUME_NAME" "$DATA_DIR"  # 'mountpoint' command checks whether a file or directory is a mount point.
fi                                                              # -q makes sure it doesn’t output anything and silently exits
--------------------------------------------------------------------------------------------------
if (( $EUID != 0 )); then                       # check if running as root, using $EUID because $UID and root username could be changed
  echo "Please run as root"
  exit
fi
-------------------------------------------------------------------------------------------------
if ! grep -qF "/mnt/dev" /etc/fstab; then                               # make sure to check for certain placeholders via grep to not append duplicate line
  echo "/dev/sda1 /mnt/dev ext4 defaults 0 0" | sudo tee -a /etc/fstab
fi
------------------------------------------------------------------------------------------------------
files=$(ls -A)                              # inspect the exit code of the command
if [[ $? != 0 ]]; then
    echo "Command failed."
------------------------------------------------------------------------------------------------------
string='some text'                              # check if a string contains a substring
if [[ $string = *"My long"* ]] ; then
  true
fi
-----------------------------------------------------------------------------------------------
while IFS='' read -r line || [[ -n "$line" ]] ; do  # read a file line by line and assigning the value to a variable
  echo "Text read from file: $line"
done < "/path/to/filename"
----------------------------------------------------------------------------------------
echo "testing wait command1" &                          
process_id=$!											# id of the first echo command is stored in $process_id variable
echo "testing wait command2" &
wait $process_id										# next command will wait for completing the task of the first echo command
echo Job 1 exited with status $?						# ‘$?’ is used to read the status value of wait command
wait $!													# wait command is used with ‘$!’, process id of the last running process
echo Job 2 exited with status $?
--------------------------------------------------
name='a.b.c.txt'                # way disconnect filename from file extension
string1="${name%.*}"
string2="${name##*.}"
echo "$string1"
a.b.c
$ echo "$string2"
txt
---------------------------------------------------
find . -name "*.wav" -print0 | while read -d $'\0' file; do ffmpeg -i "$file" -c:a libfdk_aac -vbr 3 output.m4a "${file%wav}m4a"; done
-print0 - makes it separate the matches with a null character
while - loop

# The 'read' command is used to take the output of find and assign it to a variable, "file".
# Normally this would assign values to "file" each word at a time, but the '-d $'\0'$' causes the assignments to be delimited by the null character
# The 'while' loops causes 'read' to iteratively assign values to "file" for each matching filename.
# 'do' and 'done' are part of the standard bash syntax for a 'while' loop
----------------------------------------------------------------------------------------------------------
#command-line options and arguments:

while :; do
     case $1 in
        -h|-\?|--help)
             show_help    # Display a usage synopsis.
             exit 0
            ;;
        -option1)              # option 1
            use_dev
            exit 0
            ;;
        -option2)               # option 2
            use_qa
            exit 0
          ;;
        -option3)             # option 3
            use_prod
            exit 0
          ;;
        -*)
             printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
             show_help
             exit 1
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac
 
    shift
done

if [[ $# -eq 0 ]]; then           # show help if no arguments specified
    show_help
    exit 0 
fi
# End of file

die() {
    printf '%s\n' "$1" >&2
    exit 1
}
==
# Manual loop
# Manually parsing options is the most flexible approach, and is sufficient for most scripts.

# Initialize all the option variables.
# This ensures we are not contaminated by variables from the environment.
file=
verbose=0

while :; do
    case $1 in
        -h|-\?|--help)
            show_help    # Display a usage synopsis.
            exit
            ;;
        -f|--file)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                file=$2
                shift
            else
                die 'ERROR: "--file" requires a non-empty option argument.'
            fi
            ;;
        --file=?*)
            file=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --file=)         # Handle the case of an empty --file=
            die 'ERROR: "--file" requires a non-empty option argument.'
            ;;
        -v|--verbose)
            verbose=$((verbose + 1))  # Each -v adds 1 to verbosity.
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

# if --file was provided, open it for writing, else duplicate stdout
if [ "$file" ]; then
    exec 3> "$file"
else
    exec 3>&1
fi

# Rest of the program here.
# If there are input files (for example) that follow the options, they
# will remain in the "$@" positional parameters.
==
# getopts
# The only reason you would ever use getopts is to allow single-letter option combining (-xvf handled as -x -v -f).
# It has no other purpose. The trade-off for this is that you cannot use long arguments of any kind (GNU-style "--foo" or Tcl-style "-foo"). 

# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-hv] [-f OUTFILE] [FILE]...
Do stuff with FILE and write the result to standard output. With no FILE
or when FILE is -, read standard input.

    -h          display this help and exit
    -f OUTFILE  write the result to OUTFILE instead of standard output.
    -v          verbose mode. Can be used multiple times for increased
                verbosity.
EOF
}

# Initialize our own variables:
output_file=""
verbose=0

OPTIND=1
# Resetting OPTIND is necessary if getopts was used previously in the script.
# It is a good idea to make OPTIND local if you process options in a function.

while getopts hvf: opt; do
    case $opt in
        h)
            show_help
            exit 0
            ;;
        v)  verbose=$((verbose+1))
            ;;
        f)  output_file=$OPTARG
            ;;
        *)
            show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))"   # Discard the options and sentinel --

# Everything that's left in "$@" is a non-option.  In our case, a FILE to process.
printf 'verbose=<%d>\noutput_file=<%s>\nLeftovers:\n' "$verbose" "$output_file"
printf '<%s>\n' "$@"

# End of file
